;int32 - 32-bit integer maths routines
;some corrupt iy and alternates, so watch out
;many of these use undocumented instructions

;these routines aren't necessarily very fast, but they *do* work.
;I hacked them up so I could do zcnbrot.

;for cpm zmac:
;ZZglobal swap32	;swap ixhl and debc
;ZZglobal iszero32	;z if ixhl==0, else nz
;ZZglobal inc32		;ixhl++
;ZZglobal dec32		;ixhl--
;ZZglobal add32		;ixhl+=debc (signed or unsigned)
;ZZglobal sub32		;ixhl-=debc (signed or unsigned)
;ZZglobal mul32		;ixhl*=debc (unsigned)
;ZZglobal div32		;ixhl/=debc (also debc=ixhl%debc) (unsigned)
;ZZglobal smul32	;ixhl*=debc (signed)
;ZZglobal sdiv32	;ixhl/=debc (also debc=ixhl%debc) (signed)
;ZZglobal abs32		;ixhl=abs(ixhl) (signed)
;ZZglobal neg32		;ixhl=-ixhl (signed)
;ZZglobal sgn32		;nc if ixhl>=0, else c (signed)
;remainder are 32-bit print/input, similar to routines in maths.z
;ZZglobal itoa32
;ZZglobal itoabase32
;ZZglobal dispdec32
;ZZglobal atoi32
;ZZglobal atoibase32

;note that mul/div work for unsigned numbers only.
;smul/sdiv are wrappers around mul/div which do the number conversion
; etc. and thus work for signed numbers, but they're slower than
; mul/div, so only use them if you really need signed ops.
;note also that flags are almost certainly not meaningful for
; mul/div/smul/sdiv; carry should be right for add/sub, but
; don't expect any others to be.


;swap ixhl and debc
swap32:
push ix
push hl
push de
push bc
pop hl
pop ix
pop bc
pop de
ret


;return z if ixhl is zero, else nz
;a corrupt
iszero32:
defb 0ddh
ld a,h		;ld a,ixh
defb 0ddh
or l		;or ixl
or h
or l
ret


;inc ixhl
;af corrupt
inc32:
inc hl
ld a,h
or l
ret nz
inc ix
ret


;dec ixhl
;af corrupt
dec32:
ld a,h
or l
dec hl		;doesn't affect flags
ret nz
dec ix
ret



;ixhl+=debc
;carry is correct; other flags corrupt
add32:
add hl,bc
push hl
push ix
pop hl
adc hl,de
push hl
pop ix
pop hl
ret


;ixhl-=debc
;carry is correct; other flags corrupt
sub32:
and a
sbc hl,bc
push hl
push ix
pop hl
sbc hl,de
push hl
pop ix
pop hl
ret


;this does z=x*y (32-bit unsigned multiply)
;entry: ixhl=x, debc=y
;exit:  ixhl=z
;af/bc/de/iy/bc'/de'/hl' corrupt
mul32:
;need addon, result and y.
;y stays in debc, result is hl'iy and addon is de'bc'.
push ix
push hl
exx
;addon=num1
pop bc
pop de
;result=0
ld hl,0
ld iy,0
exx

ld a,32
mu32lp:
;y>>=1
and a
rr d
rr e
rr b
rr c
jr nc,mu32sp
;result+=addon
exx
add iy,bc
adc hl,de
exx
mu32sp:
;addon<<=1
exx
and a
rl c
rl b
rl e
rl d
exx
dec a
jr nz,mu32lp

;result is in hl'iy, transfer to ixhl
exx
push hl
exx
pop ix
push iy
pop hl
ret


;does z1=x/y and z2=x mod y (32-bit unsigned divide)
;entry: ixhl=x, debc=y
;exit:  ixhl=z1 (result), debc=z2 (remainder)
;af/bc'/de'/hl'/iy corrupt
d32y: defw 0,0	;stores y
div32:
;need result, rem, addon, y
;(d32y) is y, result is hlix (!), rem is hl'iy and addon is de'bc'.

push ix
push hl
;addon=num1
exx
pop bc
pop de
exx

;see if we're trying to divide by zero
;if num2=0 ret
ld a,d
or e
or b
or c
ret z

;save num2
ld (d32y+0),bc
ld (d32y+2),de

;result=0
ld hl,0
ld ix,0
;rem=0
exx
ld hl,0
exx
ld iy,0

ld a,32

dv32lp:
push af

;rem<<=1
exx
add iy,iy
rl l
rl h
exx

;result<<=1
add ix,ix
rl l
rl h

;if top bit of addon is zero skip
exx
bit 7,d
jr z,dv32s1

;rem|=1
;still alternate
ld a,1
defb 0fdh
or l		;or iyl
defb 0fdh
ld l,a		;ld iyl,a

dv32s1:
;rem-=y
;still alternate
;tricky as can't 'sbc iy,...'
push hl
push iy		;save old rem

push de

ld de,(d32y+0)
push hl
push iy
pop hl
and a
sbc hl,de
push hl
pop iy
pop hl

ld de,(d32y+2)
sbc hl,de

pop de

bit 7,h
jr nz,dv32s2

;keep the rem-addon as new rem
pop af
pop af
push hl
push iy

;result|=1
ld a,1
defb 0ddh
or l		;or ixl
defb 0ddh
ld l,a		;ld ixl,a

dv32s2:
pop iy
pop hl

;addon<<=1
and a
rl c
rl b
rl e
rl d
exx	;finally back to normal

pop af
dec a
jr nz,dv32lp

;now do ixhl=hlix, and debc=hl'iy
push ix
push hl
pop ix		;yes, really
pop hl
exx
push hl
push iy
exx
pop bc
pop de
ret


;does ixhl=abs(ixhl)
;af/bc/de corrupt
abs32:
intabsixhl:	;internal name
defb 0ddh
ld a,h		;ld a,ixh
and 080h
ret z
;undo 2's cpl
;dec ixhl
call dec32

;now invert bits
push ix
pop bc
ld a,b
cpl
ld b,a
ld a,c
cpl
ld c,a
push bc
pop ix
ld a,h
cpl
ld h,a
ld a,l
cpl
ld l,a
ret


;internal use only
;does debc=abs(debc)
;af corrupt
intabsdebc:
bit 7,d
ret z
;undo 2's cpl
;dec debc
ld a,b
or c
dec bc	;doesn't affect flags
jr nz,iad_done
dec de
iad_done:

;now invert bits
ld a,d
cpl
ld d,a
ld a,e
cpl
ld e,a
ld a,b
cpl
ld b,a
ld a,c
cpl
ld c,a
ret


;negate ixhl (2's cpl)
;af/bc/de corrupt
neg32:
intnegixhl:	;internal name
push ix
pop bc
ld a,b
cpl
ld b,a
ld a,c
cpl
ld c,a
push bc
pop ix
ld a,h
cpl
ld h,a
ld a,l
cpl
ld l,a

call inc32
ret


;internal use only
;negate debc (2's cpl)
;af corrupt
intnegdebc:
ld a,d
cpl
ld d,a
ld a,e
cpl
ld e,a
ld a,b
cpl
ld b,a
ld a,c
cpl
ld c,a

;inc debc
inc bc
ld a,b
or c
ret nz
inc de
ret


;test sign of ixhl. returns nc=+ve, c=-ve. zero counts as +ve.
;a corrupt
sgn32:
intsgnixhl:	;internal name
defb 0ddh
ld a,h		;ld a,ixh
rla
ret




;ixhl*=debc, signed
s32signs: defb 0
smul32:
push bc
call intsgnixhl
rla
push de
rl d
rla

;store signs for later
ld (s32signs),a

;remove signs
call intabsixhl
pop de
pop bc
call intabsdebc

;do the multiply
call mul32

ld a,(s32signs)

;so now fix ixhl like this:
; if ++ or --, leave it.
; if +- or -+ (a=1 or a=2), negate it.
and 3
ret z
cp 3
ret z

;must be 1 or 2 - negate ixhl.
jr intnegixhl


;ixhl/=debc and debc=ixhl%debc, signed
sdiv32:
push bc
call intsgnixhl
rla
push de
rl d
rla

;store signs for later
ld (s32signs),a

;remove signs
call intabsixhl
pop de
pop bc
call intabsdebc

;do the divide
call div32

ld a,(s32signs)

;so now fix ixhl like this:
; if ++ or --, leave it.
; if +- or -+ (a=1 or a=2), negate it.
and 3
jr z,sd32skip
cp 3
jr z,sd32skip

;must be 1 or 2 - negate ixhl.
push bc
push de
call intnegixhl
pop de
pop bc

sd32skip:
;the remainder inherits the sign of in_ixhl.
ld a,(s32signs)
and 2
ret z

;otherwise neg debc.
jr intnegdebc



numtmp32:
defs 32
defb '$'

;convert 32-bit number in ixhl to ascii in internal buffer
;entry: ixhl=number
;exit:  de=addr of number in internal buffer, '$' terminated
itoa32:
ld b,10
;FALLS THROUGH

;call here for routine with functionality as above but with b=base

;convert number in de to ascii, in given base (unsigned)
;entry: ixhl=number, b=base (from 2 to 36)
;exit:	de=addr of num, af/bc/hl/ix/iy/bc'/de'/hl' corrupt
itoabase32:
ld de,numtmp32+32
ld a,'$'
ld (de),a

disp32nlp:
push bc
push de

;divide ixhl by base
ld de,0
ld c,b
ld b,d	;zero
call div32

ld a,c
add a,48
cp 58
jr c,disp32n1
add a,7		;compensate for >=10
disp32n1:

pop de
pop bc
dec de
ld (de),a
call iszero32
jp nz,disp32nlp
ret


;display 32-bit number in de, in decimal
dispdec32:
call itoa32
ld c,9
jp 5



;entry: hl=addr of number, exit: ixhl=actual number
atoi32:
ld b,10
;FALLS THROUGH

;32-bit version of maths.z's atoibase:
;convert number of specified base as ASCII at hl to number.
;the ASCII number should be terminated by a non-digit in this base.
;supports bases from 2 to 36
;entry: hl=address of first digit of ASCII number,
;       b=base (e.g. 10 for decimal)
;exit:  ixhl=number
atoibase32:
;modify instructions which use base
ld a,b
ld (a32mod1+1),a
ld (a32mod2+1),a

;debc=total of number so far.
ld de,0
ld b,d
ld c,e

atoi32lp:
ld a,(hl)
;uppercase it
call atoi32islw
jr nc,atoi32_0
res 5,a
atoi32_0:
sub 48
jr c,atoi32_done	;if not digit, end
cp 10
jr c,atoi32_0a
sub 7		;compensate if we're using letters
atoi32_0a:
a32mod1: cp 0	;modified
jr nc,atoi32_done	;if not digit, end
;otherwise, multiply our running total by base and add this.
push hl
push af
ld ix,0
push ix
a32mod2: ld l,0	;modified
ld h,0
call mul32
pop de	;de=0
pop af
ld c,a
ld b,0
call add32
call swap32	;put total back in debc
pop hl
inc hl
jr atoi32lp

atoi32_done:
;got number in debc - put it in ixhl.
jp swap32	;ret via this

atoi32islw:
cp 'a'
ccf
ret nc
cp '{'
ret

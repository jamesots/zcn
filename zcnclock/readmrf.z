;readmrf - expand mrf at mrfdata into 512x64 at citybmp.
;this is customised for 512x64, and it'd be a bad idea to base other
;mrf code on this. (A better starting point would be pbmtomrf's
;specmrf.z, which this is a hacked version of.)
;FWIW, the reason our 384x64 mrf is expanded into a 512x64 bitmap is
;to simplify copying bits from it to the screen (which is arranged in
;the same way in memory).
;entry: none
;exit:	af/bc/de/hl/ix corrupt
readmrf:
rst 028h
defb 'working...',0

;clear `screen'
ld hl,citybmp
ld de,citybmp+1
ld bc,4095
ld (hl),255
ldir

call bit_init

;ix is used as the record pointer and is sacred to the bit reader
;after the header is dealt with.

;to save some grief, we assume it's a 384x64 mrf. :-)

;skip header
ld de,13
add ix,de
ld a,(ix-1)
ld (bitbox),a

;do each square in turn
ld de,0
expxloop:
push de
ld c,0
ld b,64
call do_square
pop de

ld hl,64
add hl,de
ld d,h
ld e,l
;nc already, as the add won't have carried
ld bc,384
sbc hl,bc
jr nz,expxloop
ret


bitbox: defb 0
bitsleft: defb 0
bitmask: defb 128


bit_init:
ld ix,citymrf

ld a,(ix)
ld (bitbox),a
inc ix
ld a,128
ld (bitmask),a
ld a,8
ld (bitsleft),a
ret

;get bit from file.
;entry: ix=file pointer
;exit:	a=bit (in LSB), f/bc/de/hl corrupt
bit_input:
ld a,(bitsleft)
and a
jr nz,bitin1

ld a,(ix)
ld (bitbox),a
inc ix
ld a,128
ld (bitmask),a
ld a,8
ld (bitsleft),a

bitin1:
;a still bitsleft
dec a
ld (bitsleft),a

;get bit and return it
ld a,(bitmask)
ld d,a
rrca
ld (bitmask),a
ld a,(bitbox)
and d
ret z
ld a,1
ret


;do an mrf square.
;entry:	ix=file ptr, (de,c)=(x,y) top-left of square, b=size
;exit:	af/bc/de/hl corrupt
do_square:
;is it all black/white?
ld a,b
dec a
jr z,dosq1
push bc
push de
call bit_input
pop de
pop bc
rra
jr nc,dosq2

dosq1:
;yes, next bit says which.
push bc
push de
call bit_input
pop de
pop bc
rra
ret nc	;no need to draw it if it's black

;if size=1, a simple pset is sufficient.
ld a,b
dec a
jr nz,dosq3

jp mrfpreset	;return via mrfpreset

dosq3:
;and if size>=8, there's a byte-orientated way to do it which is
;quicker.
ld a,b
and 7
jr z,fillbytes

;otherwise, resort to individually resetting each pixel.
ld a,b
ld (dosqop+1),a
ld l,a
dosqyloop:
dosqop: ld h,0	;modified (ok to do, as this bit doesn't recurse)
dosqxloop:
push bc
push de
push hl
;(d)e+h-1,c+l-1
ld a,e
add a,h
dec a
ld e,a
ld a,c
add a,l
dec a
ld c,a
call mrfpreset
pop hl
pop de
pop bc
dec h
jr nz,dosqxloop

dec l
jr nz,dosqyloop
ret


dosq2:
;otherwise, not all one colour, so recurse.
and a
rr b	;size>>=1

;top-left
push bc
push de
call do_square
pop de
pop bc

;top-right
push bc
push de
ld a,e
add a,b
ld e,a
call do_square
pop de
pop bc

;bottom-left
push bc
push de
ld a,c
add a,b
ld c,a
call do_square
pop de
pop bc

;bottom-right
push bc
push de
ld a,e
add a,b
ld e,a
ld a,c
add a,b
ld c,a
call do_square
pop de
pop bc
ret


;fill byte-aligned square of pixel size b by b, at pixel pos (de,c).
;entry: as above
;exit:	af/bc/de/hl corrupt
fillbytes:
;find addr
push bc
call mrfpos2addr
pop bc

ld a,b
rrca
rrca
rrca
and 01fh
ld (filsizop+1),a

ld c,b
ld de,64
fbyloop:

push hl
filsizop: ld b,0	;modified
xor a
fbxloop:
ld (hl),a
inc hl
djnz fbxloop

pop hl
add hl,de

dec c
jr nz,fbyloop
ret



;reset pixel at (b,c) relative to citybmp
;af/bc/de/hl corrupt
mrfpreset:
call mrfpos2addr
ld a,c
cpl
and (hl)
ld (hl),a
ret


;convert pixel position (de=x, c=y) to hl=addr, c=mask w/pixel set at pos
;af/b/de corrupt
mrfpos2addr:
push de
;get pixel mask byte first
ld a,e
and 7
ld d,0
ld e,a
ld hl,masktbl
add hl,de
ld a,(hl)

;y pos
ld h,c
ld l,d	;d is still 0
rr h	;carry flag is 0 from the 'add hl,de'
rr l
rr h
rr l

;put mask (from a) into c
ld c,a

;x pos
pop de
ld a,e
and 0f8h
rr d	;get the only used bit in d
rra
rra
rra
or l
ld l,a

ld de,citybmp
add hl,de
ret

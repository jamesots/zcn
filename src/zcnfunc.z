;ZCN v1.2 - a free CP/M-like OS for the Amstrad NC100 Notepad.
;Copyright (C) 1994-1999 Russell Marks. See `zcn.txt' for license details.

;zcn additional bdos functions.
;these use function numbers >=128 - these were used by MP/M, and
;I presume there's no possibility of anyone running an MP/M program
;on ZCN... :-)
;please test that (066h)=0f7h to see if your program is running under
;ZCN before using any of these.


zftable:
	defw zfversion		;128 ZCN version number
	defw zftight		;129 set whether interrupts 'tight' or not
	defw zfrawmap		;130 return address of kybd rawmap
	defw zfstrobe		;131 return address of 1/100 strobe
	defw zfgetcon		;132 return console in/out assignments
	defw zfgtime		;133 get time (see definition for details)
	defw zfstime		;134 set time (see definition for details)
	defw zfchkdrv		;135 check drive is valid etc.
	defw zfrdrcd		;136 read 128 bytes from data block
	defw zfwrrcd		;137 write 128 bytes to data block
	defw zfrdsys		;138 read 128 bytes from boot/system block
	defw zfwrsys		;139 write 128 bytes to boot/system block
	defw zfblkmap		;140 get bytemap of blocks used/unused
	defw zfmouse		;141 set/unset serial port for mouse
	defw zffont		;142 set text font address
	defw zfsetu255		;143 set current user area to 255
	defw zfisnc100		;144 check for NC100/NC200
	defw zfkeymaps		;145 return address of keymaps
;>=146 currently unused


;on entry to zcnfunc:
;a=function number, >=128
;de=data, if appropriate
;all others corrupted
;on exit:
;af and/or hl=result, others corrupt.
;using internal stack on entry, stack setup for user stack restore
;on 'ret'.
zcnfunc:
	cp 146
	jp nc,bnop	;use bdos 'nop' for funcs not in table.
	
	;don't set HL from A on ret
	pop hl
	ld hl,bexitstk
	push hl
	
	sub 080h
	push de
	ld de,zftable
	jp tblderef	;use bdos.z's table deref etc. (also pops de before jp)


;function definitions

;return ZCN version number in hl
;not the same format as CP/M version - this returns major
;revision number in h, and minor revision number in l.
;so v0.1 gave hl=0001h, and v2.3 would give hl=0203h.
;(version numbers will always be <major_digits>.<minor_digit>)
zfversion:
	ld hl,zcnver	;defined in main.z
	ret


;sets whether to use 'tight' interrupts or not.
;e=1 to use tight interrupts, e=0 to use normal ones.
;choosing tight interrupts has these effects:
;1. Keyboard input is not converted in chars and put in the buffer.
;2. Drive lights are not updated.
;3. (66h) is not automatically fixed each 1/100th (but BDOS still does this)
;4. Serial input is ignored.
;the tight interrupts mode is designed for use by games.
;On the NC100 it is pretty hairy running with interrupts off,
;so the tight interrupts mode gives a minimal interrupt (with one
;interrupt per 1/100th of a second). Using the next function you
;can also get at the raw keyboard bytemap directly.
zftight:
	ld a,e
	ld (tightint),a
	ret


;returns the address of the keyboard rawmap (one byte=one key), in hl.
;see 'zcn.txt' under 'The Keyboard' (in the hacker's guide) for
;a description of the format of the rawmap, etc.

zfrawmap:
	ld hl,krawmap
	ret


;returns the address of the 1/100th-second strobe byte, in hl.
;this byte alternates between 0 and 255 100 times a second.
;intended to help timing in games etc.
zfstrobe:
	ld hl,fstrobe
	ret


;returns (conin) in h and (conout) in l.
;0=using normal console, 1=using serial.
zfgetcon:
	ld hl,(conout)
	ret


;the next two allow get/set of time from/to the real-time clock in
;the NC100.

;get time. returned as BCD values at *de like this:
;de+0 de+1 de+2 de+3 de+4 de+5
; yy   mm   dd   hh   mm   ss
;
;[year is specified as offset from 1990.
; dates <1-1-1990 are not supported, nor are dates >31-12-2099.]

;bear in mind that the clock is still running while this
;reading is taken, and so you should call this twice and use the
;'highest' result (i.e. the later date/time of the two).
;see 'time.z' in the utils directory for an example of how to do this.

;XXX should add NC200 version

zfgtime:
	ld a,8		;timer on, alarm off, page 0
	out (0ddh),a
	;the ports look a bit like:
	;yymmdd_hhmmss
	;cba9876543210 (0d0h+num)
	ld bc,06dch
	ex de,hl
zfgtloop:
	in a,(c)
	and 15
	rlca
	rlca
	rlca
	rlca
	ld e,a
	dec c
	in a,(c)
	and 15
	or e
	ld (hl),a
	dec c
	ld a,c
	cp 0d6h
	jr nz,zfgtskip
	dec c
zfgtskip:
	inc hl
	djnz zfgtloop
	ret


;set time. specify as buffer at de like previous function.
;XXX should add NC200 version
zfstime:
	ld a,8		;timer on, alarm off, page 0
	out (0ddh),a
	ld a,0eh	;reset timer, so we have a second to write the time in
	out (0dfh),a
	ld bc,06dch
	ex de,hl
	push hl
zfstloop:
	ld a,(hl)
	rrca
	rrca
	rrca
	rrca
	and 15
	out (c),a
	dec c
	ld a,(hl)
	and 15
	out (c),a
	dec c
	ld a,c
	cp 0d6h
	jr nz,zfstskip
	dec c
zfstskip:
	inc hl
	djnz zfstloop
	
	;XXX can't see why I need interrupts off here, but don't want to break it :-)
	ld a,9		;timer on, alarm off, page 1
	di
	out (0ddh),a
	ld a,1		;24-hour operation (not am/pm)
	out (0dah),a
	pop hl
	
	;the RTC chip has a leap-year digit (range 0..3). This is incremented
	;by the chip when the year is. If 0, it's a leap year. Since we follow
	;Amstrad/Arnor's kludgey-but-clever :-) use of a 1900-1999 chip as a
	;1990-2099 [sic] one, treating 00 as 1990, we need to fix the leap
	;year digit to be 2 for 00, 3 for 01, and so on. However, we only have
	;BCD, which is awkward, so we take this approach:
	
	;if high digit of year is even, leap year digit = (low digit+2)%4
	;if high digit of year is odd,  leap year digit = low digit%4
	;
	;so e.g. 1999 (09) gives 3, and 2000 (10) gives 0.
	;
	;Note that 2000 is a leap year, so we don't need anything special for
	;that. Just as well. :-)
	
	ld a,(hl)
	bit 4,(hl)
	jr nz,zfst2
	add a,2
zfst2:
	and 3
	
	ei
	out (0dbh),a
	ret


;135 check drive exists and has ZCN format
;entry: drive num. in e (0=current, 1=A:, 2=B:, 3=C:, 4=D:)
;exit:  carry set if all ok, false otherwise.
zfchkdrv:
	ld a,e
	jp bchkdrv


;136 read 128 bytes from a data block
;(you can't read the boot block or system blocks with this function)
;entry: de=address of table
; contents of table are:
;  de+0		byte	block number (lowest being 0)
;  de+1		byte	128-byte record number in block (0-7)
;  de+2		byte	drive (0=A:, 1=B:, etc.)
;  de+3		word	address to read 128 bytes to
;exit: a=0 if ok, or 255 if no card.
zfrdrcd:
	call parsetbl
	jp readblkrcd

parsetbl:
	ex de,hl
	ld b,(hl)
	inc hl
	ld c,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld a,(hl)
	inc hl
	ld h,(hl)
	ld l,a
	ret

;137 write 128 bytes to a data block
;similar to above, but writes :-)
zfwrrcd:
	call parsetbl
	jp writeblkrcd


;138 read 128 bytes from boot block and/or system area
;entry: de=address of table
; contents of table are:
;  de+0		byte	drive (0=A:, 1=B:, etc.)
;  de+1		word	byte offset from start of drive (0-16383)
;  de+3		word	address to read 128 bytes to
;exit: nothing
;this routine does not check for card in/out
zfrdsys:
	call parsetbl
	ld e,c
	ex de,hl
	xor a
	jp cread128

;139 write 128 bytes to boot block and/or system area
;much the same
zfwrsys:
	call parsetbl
	ld e,c
	ex de,hl
	xor a
	jp cwrite128


;140 get bytemap of used/unused data blocks
;(note that this doesn't include the (required) boot block and
; (optional) system blocks - the first block covered by the
; bytemap will be the first directory block)
;entry: d=drive num. in range 0-3 (0=A:)
;exit:  hl=address of bytemap, 1=unused, 0=used
zfblkmap:
	call findfblk
	ld hl,ffreebuf
	ret


;141 set/unset serial port up for mouse
;suitable for Microsloth mice only (7-bit, even parity).
;this doesn't interpret the mouse's output - it simply sets up the
; serial port for an MS mouse so something else can do so.
;entry: e=zero for normal, non-zero for mouse
;	d=baud rate to use (like 'setbaud' number - 3=1200, 4=2400, etc.)
;exit:  a=0 if ok, a=FFh if unsupported (i.e. if ZCN version <=0.3a)
;NB: d need not be set if you're 'turning off' the mouse.
;NB2: the mouse baud rate is stored separately from the normal one;
; calling this with e=0 to 'turn off' the mouse will restore normality.
zfmouse:
	ld a,e
	ld (mouse),a
	ld a,d
	ld (ser_ms),a
	call sinit
	xor a
	ret


;142 set text font address
;sets the font base address to de. This is where the bitmaps for the
;characters printed by ZCN are held. (Though strictly speaking it's
;192 bytes less, as the bitmaps for chars 0..31 are never used.)
;The displayable chars are those in the range 32..255, with the
;exception of 7Fh (127) and F7h (247). (The latter exception is to
;help a bit with the 0066h problem.)
;
;The normal font address is restored when your program exits, but you
;can restore it before that (if needed) by calling this routine with
;de=ea00h.
;
;NB: The font is made up of N 6-byte bitmaps (ZCN itself provides 96
;to cover the ASCII character set (with the last char ignored), but up
;to 224 are possible), as you might expect. However, the format is
;slightly unusual - for normal text output, the 4-bit-wide bitmap in
;the most significant nibble must equal that in the least significant
;one. (This lets ZCN display text a bit quicker.)
;
;Interestingly though, this gives you an easy way to have double-width
;graphics and the like - just treat the bitmap as 8x6, and output the
;relevant char twice to get your bitmap. :-)
;
;If you merely want to add a few graphics chars to the normal ZCN font,
;just copy the ZCN font bitmaps at eac0h down into TPA, copy your new
;chars onto the end, and use that.
;
;entry:	de=font base address
;exit:	a=0 to indicate that it worked (returns FFh in pre-v1.2 ZCN vers)
zffont:
	ld (fontdata),de
xoraret:		;used below
	xor a	
	ret


;143 go to user area 255
;
;It's not possible to get to user area 255 from a program using the
;normal CP/M BDOS function for setting the user area. This is partly
;deliberate, since user 255 has its problems. But this does mean that
;a program which saves the current user, goes to a new one, then
;tries to return to the old one, won't work if the original user was
;255. For cases like these, this function is provided so that at least
;ZCN-aware programs can deal with the problem.
;
;Ok, I admit it, I mainly hacked this in to support zap. :-)
;
zfsetu255:
	ld a,255
	ld (curuser),a
	ret
	
	
	;144 check for NC100/NC200
	;returns A=FFh if running NC100 `kernel', 0 if running NC200 one.
	;Since these are mutually incompatible across the machines (i.e.
	;an NC100 kernel barely runs on an NC200, and the other way around is
	;even worse), this is a pretty good indication of which machine you're
	;running on. :-) this function was introduced in ZCN 1.3, but will
	;successfully return FFh on an NC100 from at least ZCN 0.4 onwards.
	if IS_NC200
zfisnc100 equ xoraret	;sets a=0
	else
zfisnc100 equ bnop	;sets a=0xff
	endif


;145 return address of keymaps
;returns A=FFh if unsupported (i.e. ZCN 0.4 to 1.2),
;  else A=0,
;	HL=addr of the 80-byte keymap in start.z,
;	DE=addr of the two 22-byte shift-mapping tables in keyread.z.
;
;don't mess with them unless you know what you're doing.
;
zfkeymaps:
	ld hl,keytbl
	;using de for return is unusual for the BDOS, but I think it's still
	;the best approach
	ld de,kshsrc
	jr xoraret
